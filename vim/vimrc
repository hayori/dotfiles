" #############################################
"   neobundle.vim
" #############################################
"  http://vim-users.jp/2011/10/hack238/
"  :NeoBundleInstall  インストール
"  :NeoBundleInstall! アップデート
"  :NeoBundleClean    アンインストール
set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/neobundle.vim

  call neobundle#rc(expand('~/.bundle'))
endif

NeoBundle 'git://github.com/tomtom/tcomment_vim'
NeoBundle 'git://github.com/vim-scripts/Align'
NeoBundle 'git://github.com/vim-scripts/Color-Sampler-Pack'
NeoBundle 'git://github.com/altercation/vim-colors-solarized'
NeoBundle 'git://github.com/tpope/vim-rails'
NeoBundle 'git://github.com/thinca/vim-ref'
NeoBundle 'git://github.com/kana/vim-smartchr'
NeoBundle 'git://github.com/thinca/vim-quickrun'
NeoBundle 'git://github.com/sjl/gundo.vim'
NeoBundle 'git://github.com/vim-ruby/vim-ruby.git'
NeoBundle 'git://github.com/Shougo/neobundle.vim.git'
NeoBundle 'git://github.com/Shougo/neocomplcache.git'
NeoBundle 'git://github.com/Shougo/unite.vim.git'
NeoBundle 'git://github.com/Shougo/vimfiler.git'
NeoBundle 'git://github.com/Shougo/vimproc.git'
NeoBundle 'git://github.com/Shougo/vimshell.git'
NeoBundle 'git://github.com/ujihisa/unite-colorscheme'
NeoBundle 'git://github.com/ujihisa/unite-font'
NeoBundle 'git://github.com/mattn/zencoding-vim'
NeoBundle 'git://github.com/tpope/vim-haml'
NeoBundle 'git://github.com/scrooloose/nerdtree.git'
NeoBundle 'git://github.com/tpope/vim-fugitive.git'
NeoBundle 'git://github.com/kana/vim-fakeclip.git'
NeoBundle 'Lokaltog/vim-powerline'

filetype plugin on
filetype indent on

" #############################################
"   基本設定
" #############################################
set shellslash    "winでパス区切りに / を使えるようにする
"set lazyredraw   "マクロ実行中は描画しない
"set autoread     "外部のエディタで編集中のファイルが変更されたら自動で読み直す
set visualbell    "ビープを鳴らさない
" set autochdir    "カレントディレクトリを自動で移動
set wildmode=list:longest "コマンドライン補間をシェルっぽく

set showmatch         "括弧の対応をハイライト
set showcmd           "入力中のコマンドを表示
set number            "行番号表示
set wrap              "画面幅で折り返す
set notitle           "タイトル書き換えない
set scrolloff=5       "行送り
set laststatus=2      "ステータスラインを表示

set nobackup    "バックアップ取らない
set autoread    "他で書き換えられたら自動で読み直す
set noswapfile  "スワップファイル作らない
set hidden      "編集中でも他のファイルを開けるようにする

set t_Co=256  " 256色カラーに対応

"表示行単位で行移動する
nmap j gj
nmap k gk
vmap j gj
vmap k gk

"不可視文字を表示する
" trailは行末スペース
set list
"set listchars=tab:>¥,trail:_
"ステータスラインに文字コード、改行などを表示する
" set statusline=%<%F¥\%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%4v(ASCII=%03.3b,HEX=%02.2B)_\%l/%L(%P)%m
"ステータスラインに文字コード、改行などを表示する(fugitive必須)
set statusline=%<%F¥\%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%{fugitive#statusline()}%=%4v(ASCII=%03.3b,HEX=%02.2B)_\%l/%L(%P)%m
"全角スペースを可視化
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/
" カーソル行をハイライト
set cursorline
" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END
:hi clear CursorLine
:hi CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black

" Escの2回押しでハイライト消去
nmap <ESC><ESC> :nohlsearch<CR><ESC>

"タブ関係
" tabstopはTab文字を画面上で何文字分に展開するか
" shiftwidthはcindentやautoindent時に挿入されるインデントの幅
" softtabstopはTabキー押し下げ時の挿入される空白の量，0の場合はtabstopと同じ，BSにも影響する
au BufNewFile,BufRead * set tabstop=2 shiftwidth=2 softtabstop=0
au BufNewFile,BufRead *.php set tabstop=4 shiftwidth=4 softtabstop=0
set expandtab               "タブを空白文字に展開
set autoindent smartindent  "自動インデント，スマートインデント

" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" 保存時にtabをスペースに変換する
autocmd BufWritePre * :%s/\t/  /ge

" Ctrl-iでヘルプ
nnoremap <C-i>  :<C-u>help<Space>
" カーソル下のキーワードをヘルプでひく
nnoremap <C-i><C-i> :<C-u>help<Space><C-r><C-w><Enter>

" インデントを連続して変更
vnoremap < <gv
vnoremap > >gv

",e でそのコマンドを実行
"  quickrun.vim入れたのでコメントアウト
" nmap ,e :execute '!' &ft ' %'<CR>

" #############################################
" カラースキーマの変更
" #############################################
let ColorRoller = {}
let ColorRoller.colors = [
      \ 'Dark2',
      \ 'DarkZ',
      \ 'solarized',
      \ 'adaryn',
      \ 'darkblue',
      \ 'pyte',
      \ 'candycode',
      \ ]

function! ColorRoller.change()
  let color = get(self.colors, 0)
  " tabpagecolorscheme を使用している場合は↓の "colorscheme" を "Tcolorscheme" に変える。
  silent exe "colorscheme " . color
  redraw
  echo self.colors
endfunction

function! ColorRoller.roll()
  let item = remove(self.colors, 0)
  call insert(self.colors, item, len(self.colors))
  call self.change()
endfunction

function! ColorRoller.unroll()
  let item = remove(self.colors, -1)
  call insert(self.colors, item, 0)
  call self.change()
endfunction

nnoremap <silent><F9>   :<C-u>call ColorRoller.roll()<CR>
nnoremap <silent><S-F9> :<C-u>call ColorRoller.unroll()<CR>

" #############################################
"   RSense
" #############################################
" setlocal completefunc=RSenseComplete
" if !exists('g:neocomplcache_omni_patterns')
" "  let g:neocomplcache_omni_patterns = {}
" endif
" let g:rsenseUseOmniFunc = 1
" if filereadable(expand('~/.vim/rsense/bin/rsense'))
"   let g:rsenseHome = expand('~/.vim/rsense')
"   let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
" endif


" #############################################
"   Plugins
" #############################################

""" vimfiler
" デフォルトのファイラーに設定
let g:vimfiler_as_default_explorer = 1

""" unite.vim
" 入力モードで開始する
let g:unite_enable_start_insert = 1
" C-w で一つ上のパスへ移動
imap <buffer> <C-w> <plug>(unite_delete_backward_path)
"history/yankの有効化
let g:unite_source_history_yank_enable = 1
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" カラースキーマ変更
nnoremap <silent> ,uc :<C-u>Unite colorscheme -auto-preview<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

""" neocomplcache
" 有効にする
let g:neocomplcache_enable_at_startup = 1
" 大文字入力まで、大文字小文字を区別しない
let g:neocomplcache_enable_smart_case = 1
" _ 区切り補完
let g:neocomplcache_enable_underbar_completion = 1

""" vimproc
" 以下を実行
" cd ~/.bundle/vimproc/
" make -f make_mac.mak

""" smartchr.vim
autocmd FileType ruby inoremap <buffer> <expr> = smartchr#one_of(' = ', ' == ', '=')
autocmd FileType ruby inoremap <buffer> <expr> . smartchr#one_of('.', ' => ', '..', '...')

""" gundo.vim
nnoremap <F5> :GundoToggle<CR>

""" zencoding-vim
let g:user_zen_settings = {
\   'lang' : 'ja',
\   'indentation' : ' ',
\   'css' : {
\     'filters' : 'fc',
\   },
\   'javascript' : {
\     'snippets' : {
\       'jq' : "$(function() {\n\t${cursor}${child}\n});",
\       'fn' : "(function() {\n\t${cursor}\n|)();",
\     },
\   },
\   'haml': {
\     'filters': 'haml',
\     'extends': 'html',
\   },
\}
" 入力補完を有効にする
let g:use_zen_complete_tag = 1

""" vim-rails
nnoremap <silent> ,r :<C-u>R<CR>

""" nerdtree
"" NERDTreeでgrep検索
"" http://yp.xenophy.com/?p=78
"" https://gist.github.com/414375
nnoremap <silent> ,t :<C-u>NERDTreeToggle<CR>

""" vim-fugitive
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

""" vim-fakeclip
"" yank, pasteでクリップボードを使用する
set clipboard=unnamed

""" vim-powerline
"" ステータスラインを良い感じに
let g:Powerline_symbols = 'fancy'
