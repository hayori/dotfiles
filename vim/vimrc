"------------------------------
" メモ
"------------------------------
" 行を連結する shift + j

"------------------------------
" 基 本 設 定
"------------------------------
set nocompatible      "vi互換モードをOFF
set mouse=a           "マウスを有効
set ttymouse=xterm2   "マウスで使用する端末設定、とりあえずこれで
" set clipboard=unnamed "バッファをクリップボードにコピー
" set nohlsearch        "検索時はハイライトを無効
set number            "行番号を表示
set incsearch         "インクリメンタルサーチを有効
set ignorecase        "大文字小文字を区別せず検索
set laststatus=2      "ステータスラインを常に表示
set shellslash        "Windowsでパス区切りにスラッシュを使用
"set lazyredraw        "マクロ実行中は描画しない 
set showmatch         "括弧の対応をハイライト
set visualbell        "ビープを鳴らさない
set showcmd           "コマンドをステータスラインに表示する
set wrap              "画面幅で折り返す
set notitle           "ウィンドウタイトルを変更しない(Thanks for flying Vim防止)
set nobackup          "バックアップファイルを作成しない
set noswapfile        "スワップファイルを作成しない
set autoread          "他で書き換えれたら自動で再読込み
" set hidden            "編集中ファイルを保存せずに他のファイルを開ける
set list              "行末を可視化

set listchars=eol:$,tab:>.   "非表示文字を表示
set undolevels=1000          "UNDOできる上限"
set pastetoggle=<F12>        "ペーストモード切替(set pasteのままだとプラグイン等動作しない)"
"set scrolloff=999           "常にカーソル行を真ん中にする

set wildmenu wildmode=longest:full,full  "コマンドラインモードでの補完表示形式
set backspace=start,eol,indent           "バックスペースキーでの文字削除を許可
"set whichwrap=b,s,[,],<,>,~             "カーソルキー移動をスクリーンエディタに合わせる

"### 全角スペースを可視化###
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
"match ZenkakuSpace /　/

"### ハイライト設定 ###
syntax on              "シンタックスハイライトを有効
"set t_Co=256           "256色ターミナルに対応
highlight StatusLine ctermfg=black ctermbg=grey
highlight CursorLine ctermfg=none ctermbg=darkgray cterm=none
highlight MatchParen ctermfg=none ctermbg=darkgray
highlight Comment ctermfg=darkgreen ctermbg=none
highlight Directory ctermfg=darkgreen ctermbg=none

"### ステータスライン表示設定 ###
" set statusline=%F%r%h%=
set statusline=%<%F¥\%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%4v(ASCII=%03.3b,HEX=%02.2B)_\%l/%L(%P)%m

"### 折返し行の移動を直感的にする ###
nmap j gj
nmap k gk
nmap j gj
nmap k gk

"### TABで15文字カーソル移動 ###
nmap <silent> <Tab> 15<Right>
vmap <silent> <Tab> <C-o>15<Right>
nmap <silent> <S-Tab> 15<Left>
vmap <silent> <S-Tab> <C-o>15<Left>

"### バッファ操作 ###
map <silent> <C-n> :update<CR>:bn<CR>
map <silent> <C-b> :update<CR>:bp<CR>
map <F4> <ESC>:bnext \| bdelete #<CR>

"### ESCの2回押しでハイライト削除 ###
nmap <ESC><ESC> :nohlsearch<CR><ESC>

"### TABインデント設定 ###
" tabstopはTabを画面上で何文字分に展開するか
" shiftwidthはcindentやautoindent時に挿入されるインデントの幅
" softtabstopはTabキー押し下げ時の挿入される空白の量，0の場合はtabstopと同じ，BSにも影響する
au BufNewFile,BufRead * set tabstop=2 shiftwidth=2 softtabstop=0
au BufNewFile,BufRead *.php set tabstop=4 shiftwidth=4 softtabstop=0
autocmd filetype coffee,javascript setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab
set expandtab               "タブを空白文字に展開
set autoindent smartindent  "自動インデント，スマートインデント

"### 括弧の自動補完 ###
" inoremap { {}<LEFT>
" inoremap [ []<LEFT>
" inoremap ( ()<LEFT>
" inoremap < <><LEFT>
" inoremap " ""<LEFT>
" inoremap ' ''<LEFT>
" vnoremap { "zdi{<C-R>z}<ESC>
" vnoremap [ "zdi[<C-R>z]<ESC>
" vnoremap ( "zdi(<C-R>z)<ESC>
" ""vnoremap < "zdi(<C-R>z><ESC>
" vnoremap " "zdi"<C-R>z"<ESC>
" vnoremap ' "zdi'<C-R>z'<ESC>

"### 複数回のインデントを行えるようにする ###
vnoremap <silent> > >gv
vnoremap <silent> < <gv

"### 入力モード中にCtrl+ で移動 ###
inoremap <C-h> <Left>
inoremap <C-l> <Right>

"### gpでヤンクレジスタをペースト ###
nnoremap gp "0P


"------------------------------
" Neobundle
"------------------------------
" :NeoBundleInstall  インストール
" :NeoBundleInstall! アップデート
" :NeoBundleClean    アンインストール

"vim起動時のみruntimepathにneobundle.vimを追加
if has('vim_starting')
  set runtimepath+=~/.vim/neobundle.vim
endif

"neobundle.vimの初期化
call neobundle#rc(expand('~/.bundle'))

"neobundle.vimを更新する
NeoBundleFetch 'Shougo/neobundle.vim'

"####### ファイルアクセス補助 #######
NeoBundle 'kien/ctrlp.vim'


"####### 入力補完 #######
NeoBundle 'Shougo/neocomplete'

"AutoComplPopを無効化する
let g:acp_enableAtStartup = 0

"neocompleteを起動時に有効にする
let g:neocomplete#enable_at_startup = 1

"大文字が入力されるまで、大文字小文字を区別しない
let g:neocomplete#enable_smart_case = 1

"補完開始する文字数
let g:neocomplete#sources#syntax#min_keyword_length = 3

"自動補完を行わないバッファ名 
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

"補完候補の数
let g:neocomplete#max_list = 15

"1番目の候補を自動選択
" let g:neocomplete#enable_auto_select = 1

"前回行われた補完をキャンセルします
" inoremap <expr><C-g> neocomplete#undo_completion()
 
"補完候補のなかから、共通する部分を補完します
" inoremap <expr><C-l> neocomplete#complete_common_string()
 
"改行で補完ウィンドウを閉じる (vim-endwiseと同居させるには以下)
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? neocomplete#close_popup() : "\<CR>" 
endfunction

"tabで補完候補の選択を行う
inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"
 
"<C-h>や<BS>を押したときに確実にポップアップを削除します
" inoremap <expr><C-h> neocomplete#smart_close_popup().”\<C-h>”
 
"現在選択している候補を確定して、コマンドモードに切替
inoremap <expr><C-y> neocomplete#close_popup()."\<ESC>"
 
"現在選択している候補をキャンセルし、ポップアップを閉じます
inoremap <expr><C-e> neocomplete#cancel_popup()

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions',
    \ 'ruby' : $HOME.'/.vim/dict/ruby.dict'
    \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

"rails-vimとneocompleteの競合でエラーが起るため対策
let g:neocomplete#force_overwrite_completefunc = 1

" 補完候補の色づけ for vim7
hi Pmenu ctermbg=255 ctermfg=0 guifg=#000000 guibg=#999999
hi PmenuSel ctermbg=blue ctermfg=black
hi PmenuSbar ctermbg=0 ctermfg=9
hi PmenuSbar ctermbg=255 ctermfg=0 guifg=#000000 guibg=#FFFFFF


"####### コメントアウト #######
NeoBundle 'tomtom/tcomment_vim'
" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
      \}
" マッピングを追加
function! SetErubyMapping2()
  nmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
  nmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
  nmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>

  vmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
  vmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
  vmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>
endfunction
" erubyのときだけ設定を追加
au FileType eruby call SetErubyMapping2()
" phpのときだけ設定を追加
au FileType php nmap <buffer><C-_>c :TCommentAs php_surround<CR>
au FileType php vmap <buffer><C-_>c :TCommentAs php_surround<CR>


"####### Snippet #######
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" <TAB>: completion.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" スニペットファイルの保存ディレクトリのパスを登録
let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'


"####### surround #######
NeoBundle 'tpope/vim-surround'


"####### Ruby #######
NeoBundle 'vim-ruby/vim-ruby'


"####### Rails #######
NeoBundle 'tpope/vim-rails'
let g:rails_default_file='config/database.yml'
let g:rails_level = 4
let g:rails_mappings=1
let g:rails_modelines=0
" let g:rails_some_option = 1
" let g:rails_statusline = 1
" let g:rails_subversion=0
" let g:rails_syntax = 1
" let g:rails_url='http://localhost:3000'
" let g:rails_ctags_arguments='--languages=-javascript'
" let g:rails_ctags_arguments = ''
function! SetUpRailsSetting()
  nnoremap <buffer><Space>r :R<CR>
  nnoremap <buffer><Space>a :A<CR>
  nnoremap <buffer><Space>m :Rmodel<Space>
  nnoremap <buffer><Space>c :Rcontroller<Space>
  nnoremap <buffer><Space>v :Rview<Space>
  nnoremap <buffer><Space>h :Rhelper<Space>
  nnoremap <buffer><Space>p :Rpreview<CR>
endfunction
aug MyAutoCmd
  au User Rails call SetUpRailsSetting()
aug END
aug RailsDictSetting
  au!
aug END

NeoBundle 'scrooloose/nerdtree'
nnoremap <silent> ,t :<C-u>NERDTreeToggle<CR>

NeoBundle 'vim-scripts/dbext.vim', {
  \ 'lazy': 1,
  \ 'autoload': {
  \   'commands': 'Select',
\ }}


"####### haml #######
NeoBundle 'tpope/vim-haml'


"####### unite #######
NeoBundle 'Shougo/unite.vim'
" let g:unite_enable_start_insert = 1  "入力モードで開始する
imap <buffer> <C-w> <plug>(unite_delete_backward_path)
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ut :<C-u>Unite tab<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q


"####### unite-rails #######
NeoBundle 'basyura/unite-rails'
function! UniteRailsSetting()
  nnoremap <buffer><C-H><C-H><C-H>  :<C-U>Unite rails/view<CR>
  nnoremap <buffer><C-H><C-H>       :<C-U>Unite rails/model<CR>
  nnoremap <buffer><C-H>            :<C-U>Unite rails/controller<CR>
 
  nnoremap <buffer><C-H>c           :<C-U>Unite rails/config<CR>
  nnoremap <buffer><C-H>s           :<C-U>Unite rails/spec<CR>
  nnoremap <buffer><C-H>h           :<C-U>Unite rails/helper<CR>
  nnoremap <buffer><C-H>m           :<C-U>Unite rails/db -input=migrate<CR>
  nnoremap <buffer><C-H>l           :<C-U>Unite rails/lib<CR>
  nnoremap <buffer><expr><C-H>g     ':e '.b:rails_root.'/Gemfile<CR>'
  nnoremap <buffer><expr><C-H>r     ':e '.b:rails_root.'/config/routes.rb<CR>'
  nnoremap <buffer><expr><C-H>se    ':e '.b:rails_root.'/db/seeds.rb<CR>'
  nnoremap <buffer><C-H>ra          :<C-U>Unite rails/rake<CR>
  nnoremap <buffer><C-H>he          :<C-U>Unite rails/heroku<CR>
endfunction
aug MyAutoCmd
  au User Rails call UniteRailsSetting()
aug END

"####### 非同期処理 #######
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin' : 'make -f make_cygwin.mak',
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }


"####### VimShell #######
NeoBundle 'Shougo/vimshell', {
  \ 'lazy': 1,
  \ 'autoload': {
  \   'commands': 'VimShell',
\ }}


"####### \rでスクリプトを実行 #######
NeoBundle 'thinca/vim-quickrun'
"実行結果を横分割して下に表示
let g:quickrun_config={'*': {'split': ''}}
set splitbelow
"RSpec及び、非同期実行に対応(なんか遅いのでコメントアウト)
" let g:quickrun_config._ = {'runner' : 'vimproc'}
" let g:quickrun_config['ruby.rspec'] = { 'command': 'rspec', 'cmdopt': 'bundle exec', 'exec': '%o %c %s' }
" augroup RSpec
"   autocmd!
"   autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
" augroup END


"####### 終了タグの自動書き出し#######
NeoBundle 'tpope/vim-endwise'
" let g:endwise_no_mappings=1


"####### %で開始・終了タグを移動 #######
NeoBundle 'vim-scripts/ruby-matchit'


"####### !で切替 #######
NeoBundle 'AndrewRadev/switch.vim'
nnoremap ! :Switch<CR>
let s:switch_definition = {
      \ '*': [
      \   ['is', 'are']
      \ ],
      \ 'ruby,eruby,haml' : [
      \   ['if', 'unless'],
      \   ['while', 'until'],
      \   ['.blank?', '.present?'],
      \   ['include', 'extend'],
      \   ['class', 'module'],
      \   ['.inject', '.delete_if'],
      \   ['.map', '.map!'],
      \   ['attr_accessor', 'attr_reader', 'attr_writer'],
      \ ],
      \ 'Gemfile,Berksfile' : [
      \   ['=', '<', '<=', '>', '>=', '~>'],
      \ ],
      \ 'ruby.application_template' : [
      \   ['yes?', 'no?'],
      \   ['lib', 'initializer', 'file', 'vendor', 'rakefile'],
      \   ['controller', 'model', 'view', 'migration', 'scaffold'],
      \ ],
      \ 'erb,html,php' : [
      \   { '<!--\([a-zA-Z0-9 /]\+\)--></\(div\|ul\|li\|a\)>' : '</\2><!--\1-->' },
      \ ],
      \ 'rails' : [
      \   [100, ':continue', ':information'],
      \   [101, ':switching_protocols'],
      \   [102, ':processing'],
      \   [200, ':ok', ':success'],
      \   [201, ':created'],
      \   [202, ':accepted'],
      \   [203, ':non_authoritative_information'],
      \   [204, ':no_content'],
      \   [205, ':reset_content'],
      \   [206, ':partial_content'],
      \   [207, ':multi_status'],
      \   [208, ':already_reported'],
      \   [226, ':im_used'],
      \   [300, ':multiple_choices'],
      \   [301, ':moved_permanently'],
      \   [302, ':found'],
      \   [303, ':see_other'],
      \   [304, ':not_modified'],
      \   [305, ':use_proxy'],
      \   [306, ':reserved'],
      \   [307, ':temporary_redirect'],
      \   [308, ':permanent_redirect'],
      \   [400, ':bad_request'],
      \   [401, ':unauthorized'],
      \   [402, ':payment_required'],
      \   [403, ':forbidden'],
      \   [404, ':not_found'],
      \   [405, ':method_not_allowed'],
      \   [406, ':not_acceptable'],
      \   [407, ':proxy_authentication_required'],
      \   [408, ':request_timeout'],
      \   [409, ':conflict'],
      \   [410, ':gone'],
      \   [411, ':length_required'],
      \   [412, ':precondition_failed'],
      \   [413, ':request_entity_too_large'],
      \   [414, ':request_uri_too_long'],
      \   [415, ':unsupported_media_type'],
      \   [416, ':requested_range_not_satisfiable'],
      \   [417, ':expectation_failed'],
      \   [422, ':unprocessable_entity'],
      \   [423, ':precondition_required'],
      \   [424, ':too_many_requests'],
      \   [426, ':request_header_fields_too_large'],
      \   [500, ':internal_server_error'],
      \   [501, ':not_implemented'],
      \   [502, ':bad_gateway'],
      \   [503, ':service_unavailable'],
      \   [504, ':gateway_timeout'],
      \   [505, ':http_version_not_supported'],
      \   [506, ':variant_also_negotiates'],
      \   [507, ':insufficient_storage'],
      \   [508, ':loop_detected'],
      \   [510, ':not_extended'],
      \   [511, ':network_authentication_required'],
      \ ],
      \ 'rspec': [
      \   ['describe', 'context', 'specific', 'example'],
      \   ['before', 'after'],
      \   ['be_true', 'be_false'],
      \   ['get', 'post', 'put', 'delete'],
      \   ['==', 'eql', 'equal'],
      \   { '\.should_not': '\.should' },
      \   ['\.to_not', '\.to'],
      \   { '\([^. ]\+\)\.should\(_not\|\)': 'expect(\1)\.to\2' },
      \   { 'expect(\([^. ]\+\))\.to\(_not\|\)': '\1.should\2' },
      \ ],
      \ 'markdown' : [
      \   ['[ ]', '[x]']
      \ ]
      \ }


"####### 縦移動を高速に行う #######
NeoBundle 'Lokaltog/vim-easymotion'
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「;」 + 何かにマッピング
let g:EasyMotion_leader_key=";"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue


"####### f検索移動を複数行で行う #######
NeoBundle 'rhysd/clever-f.vim'


"####### s(S)で2文字入力の検索移動を行う #######
NeoBundle 'goldfeld/vim-seek'


"####### F3でマーク、F2でマークした行へ移動 #######
" ~/.vim/plugin/visualmark.vim にファイルで導入
map <unique> <F3> <Plug>Vm_toggle_sign
map <silent> <unique> mm <Plug>Vm_toggle_sign


"####### カラースキーム #######
NeoBundle 'tomasr/molokai'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'altercation/solarized'
NeoBundle 'vim-scripts/newspaper.vim'
NeoBundle 'w0ng/vim-hybrid'

" カラースキームの切替
NeoBundle 'ujihisa/unite-colorscheme'
nnoremap <silent> ,uc :<C-u>Unite colorscheme -auto-preview<CR>


"####### ステータスラインを格好良くする #######
NeoBundle 'itchyny/lightline.vim'
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \   'active': {
  \     'left': [ ['mode', 'paste'], ['readonly', 'filename', 'git', 'modified'] ],
  \   },
  \   'component_function': {
  \     'git': 'fugitive#statusline'
  \   }
  \ }


"####### 閉じカッコを自動化 #######
NeoBundle 'kana/vim-smartinput'

" ()のスペース入力補助
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
\   'at'    : '(\%#)',
\   'char'  : '<Space>',
\   'input' : '<Space><Space><Left>',
\   })
call smartinput#define_rule({
\   'at'    : '( \%# )',
\   'char'  : '<BS>',
\   'input' : '<Del><BS>',
\   })

" {}のスペース入力補助
call smartinput#define_rule({
\   'at'    : '{\%#}',
\   'char'  : '<Space>',
\   'input' : '<Space><Space><Left>',
\   })
call smartinput#define_rule({
\   'at'    : '{ \%# }',
\   'char'  : '<BS>',
\   'input' : '<Del><BS>',
\   })

" 文字列内展開 #{} 補助
call smartinput#map_to_trigger('i', '#', '#', '#')
call smartinput#define_rule({
\   'at'       : '\%#',
\   'char'     : '#',
\   'input'    : '#{}<Left>',
\   'filetype' : ['ruby'],
\   'syntax'   : ['Constant', 'Special'],
\   })

" ブロック引数 do || 補助
call smartinput#map_to_trigger('i', '<Bar>', '<Bar>', '<Bar>')
call smartinput#define_rule({
\   'at' : '\({\|\<do\>\)\s*\%#',
\   'char' : '<Bar>',
\   'input' : '<Bar><Bar><Left>',
\   'filetype' : ['ruby'],
\    })

" erb入力補助
call smartinput#define_rule({
\   'at'       : '<%\%#',
\   'char'     : '<Space>',
\   'input'    : '  %><Left><Left><Left>',
\   'filetype' : ['eruby'],
\   })

" erb展開入力補助
call smartinput#define_rule({
\   'at'       : '<%=\%#',
\   'char'     : '<Space>',
\   'input'    : '  %><Left><Left><Left>',
\   'filetype' : ['eruby'],
\   })

" erbコメント入力補助
call smartinput#define_rule({
\   'at'       : '<%#\%#',
\   'char'     : '<Space>',
\   'input'    : '  %><Left><Left><Left>',
\   'filetype' : ['eruby'],
\   })


"####### 入力補助 #######
NeoBundle 'kana/vim-smartchr'
autocmd FileType eruby inoremap <buffer> <expr> < smartchr#one_of('<', '<%', '<%=')


"####### Codic検索 #######
NeoBundle 'koron/codic-vim'


"####### Git操作 #######
NeoBundle 'tpope/vim-fugitive'


"####### Git履歴閲覧 #######
NeoBundle 'gregsexton/gitv'


"####### ファイラー ######
" 参考: http://d.hatena.ne.jp/h1mesuke/20100611/p1
NeoBundle 'Shougo/vimfiler'

" 編集時タブで開く
let g:vimfiler_edit_action = 'tabopen'


"####### インデントにガイド表示 ######
NeoBundle 'nathanaelkane/vim-indent-guides' 
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=237
" let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
au FileType coffee,ruby,javascript,python IndentGuidesEnable
nmap <silent><Leader>g <Plug>IndentGuidesToggle


"####### css3シンタックス ######
NeoBundle 'hail2u/vim-css3-syntax'


"####### html5シンタックス ######
NeoBundle 'taichouchou2/html5.vim'


"####### javascriptシンタックスとインデント ######
NeoBundle 'pangloss/vim-javascript'


"####### coffee-script ######
NeoBundle 'kchmck/vim-coffee-script'


"####### emmet ######
NeoBundle 'mattn/emmet-vim'
let g:user_emmet_leader_key='<C-t>'


"---------------------------------------------------
"カラースキーマ
"---------------------------------------------------
colorscheme hybrid

"---------------------------------------------------
"読込んだプラグイン含め、ファイルタイプの検出、
"ファイルタイプ別プラグイン/インデントを有効化する
"---------------------------------------------------
filetype plugin indent on

